{"version":3,"sources":["utils.js","Details.js","api.js","PokeCard.js","App.js","serviceWorker.js","index.js"],"names":["getTypeColor","typeName","replaceFirst","str","charAt","toUpperCase","slice","Details","data","Card","style","position","top","overflow","Container","padding","CardMedia","paddingTop","title","name","image","CardContent","Typography","variant","align","Table","TableBody","table","map","row","TableRow","TableCell","component","scope","key","property","value","CircularProgress","PokedexAPI","axios","create","baseURL","getPokemonList","urlNext","get","getPokemonInfo","id","useStyles","makeStyles","theme","cardMedia","cardContent","flexGrow","justifyContent","PokeCard","itemData","handleClick","classes","useState","cardData","setCardData","useEffect","a","url","match","result","fetchData","Grid","item","xs","sm","md","lg","Zoom","in","timeout","enter","exit","CardActionArea","onClick","className","sprites","front_default","CardActions","types","type","Chip","backgroundColor","label","size","palette","primary","main","spacing","color","common","white","cardContainer","App","listData","setListData","detailsCard","setDetailsCard","isLoading","setLoading","createTableData","stats","push","stat","base_stat","weight","onCardClick","useCallback","console","log","loadMoreHandler","next","prevState","newState","results","concat","maxWidth","gutterBottom","LinearProgress","container","direction","Button","fullWidth","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0YAAaA,EAAe,SAACC,GAC3B,OAAQA,GACN,IAAK,SACH,MAAO,UACT,IAAK,WACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,IAAK,OACH,MAAO,UACT,IAAK,MACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,IAAK,OACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,IAAK,WACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,MACH,MAAO,UACT,IAAK,SACH,MAAO,UACT,IAAK,OACH,MAAO,UACT,IAAK,QACH,MAAO,UACT,IAAK,UACH,MAAO,UACT,IAAK,SACH,MAAO,YAKAC,EAAe,SAACC,GAC3B,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,ICUlCC,MA1Cf,YAA4B,IAATC,EAAQ,EAARA,KACjB,OACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,SAAU,SACVC,IAAK,KACLC,SAAU,YAGZ,kBAACC,EAAA,EAAD,CAAWJ,MAAO,CAAEK,QAAS,QAC3B,kBAACC,EAAA,EAAD,CACEN,MAAO,CAAEO,WAAY,OACrBC,MAAOV,EAAKW,KACZC,MAAOZ,EAAKY,SAGhB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAC5BtB,EAAaM,EAAKW,OAGrB,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGlB,EACCA,EAAKmB,MAAMC,KAAI,SAACC,GAAD,OACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,KAAKC,MAAM,MAAMC,IAAKL,EAAIM,UAC5CjC,EAAa2B,EAAIM,WAEpB,kBAACJ,EAAA,EAAD,CAAWP,MAAM,SAASK,EAAIO,WAIlC,kBAACC,EAAA,EAAD,W,4CC9CRC,E,OAAaC,EAAMC,OAAO,CAC9BC,QAAS,8BAGEC,EAAiB,SAACC,GAC7B,OAAOA,EACHL,EAAWM,IAAID,GACfL,EAAWM,IAAX,gCAGOC,EAAiB,SAACC,GAAD,OAAQR,EAAWM,IAAX,mBAA2BE,EAA3B,OCKhCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTjC,WAAY,OAEdkC,YAAa,CACXC,SAAU,EACVC,eAAgB,cA2DLC,MAvDf,YAA8C,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YACtBC,EAAUV,IAD2B,EAEXW,mBAAS,MAFE,mBAEpCC,EAFoC,KAE1BC,EAF0B,KAW3C,OARAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKjB,EAAeU,EAASQ,IAAIC,MAAM,WAAW,IADlD,OACVC,EADU,OAEhBL,EAAYK,EAAOzD,MAFH,2CAAH,qDAIf0D,KACC,CAACX,EAASQ,MAGX,kBAACI,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGtC,IAAKqB,EAASpC,MACpD,kBAACsD,EAAA,EAAD,CACEC,IAAI,EACJC,QAAS,CACPC,MAAO,IACPC,KAAM,MAGPlB,EACC,kBAACmB,EAAA,EAAD,CAAgBC,QAAS,kBAAMvB,EAAYG,EAASb,MAClD,kBAACrC,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,CACEgE,UAAWvB,EAAQP,UACnBhC,MAAM,QACNE,MAAOuC,EAASsB,QAAQC,gBAE1B,kBAAC7D,EAAA,EAAD,CAAa2D,UAAWvB,EAAQN,aAC9B,kBAAC7B,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UACnCtB,EAAayD,EAASxC,QAG3B,kBAACgE,EAAA,EAAD,KACGxB,EAASyB,MAAMxD,KAAI,SAACyD,GACnB,OACE,kBAACC,EAAA,EAAD,CACE5E,MAAO,CAAE6E,gBAAiBvF,EAAaqF,EAAKA,KAAKlE,OACjDqE,MAAOtF,EAAamF,EAAKA,KAAKlE,MAC9BsE,KAAK,QACLvD,IAAKmD,EAAKA,KAAKlE,aAQ3B,kBAACkB,EAAA,EAAD,SC9DJU,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC/B,MAAO,CACLqE,gBAAiBtC,EAAMyC,QAAQC,QAAQC,KACvC7E,QAASkC,EAAM4C,QAAQ,EAAG,EAAG,GAC7BC,MAAO7C,EAAMyC,QAAQK,OAAOC,OAE9BC,cAAe,CACblF,QAASkC,EAAM4C,QAAQ,EAAG,EAAG,QA+GlBK,MA3Gf,WAAgB,IAAD,EACmBxC,mBAAS,MAD5B,mBACNyC,EADM,KACIC,EADJ,OAEyB1C,mBAAS,MAFlC,mBAEN2C,EAFM,KAEOC,EAFP,OAGmB5C,oBAAS,GAH5B,mBAGN6C,EAHM,KAGKC,EAHL,KAgBb,SAASC,EAAgBjG,GACvB,IAAMyD,EAAS,CACbtC,MAAO,GACPR,KAAM,KACNC,MAAO,MAQT,OANAZ,EAAKkG,MAAM9E,KAAI,SAACwC,GACdH,EAAOtC,MAAMgF,KAAK,CAAExE,SAAUiC,EAAKwC,KAAKzF,KAAMiB,MAAOgC,EAAKyC,eAE5D5C,EAAOtC,MAAMgF,KAAK,CAAExE,SAAU,SAAUC,MAAO5B,EAAKsG,SACpD7C,EAAO7C,MAAQZ,EAAKyE,QAAQC,cAC5BjB,EAAO9C,KAAOX,EAAKW,KACZ8C,EAvBTJ,qBAAU,WACR2C,GAAW,GACI,uCAAG,4BAAA1C,EAAA,sEACKpB,IADL,OACVuB,EADU,OAGhBmC,EAAYnC,EAAOzD,MACnBgG,GAAW,GAJK,2CAAH,oDAMftC,KACC,IAiBH,IAAM6C,EAAcC,sBAAW,uCAAC,WAAOlE,GAAP,eAAAgB,EAAA,sEACTjB,EAAeC,GADN,OACxBmB,EADwB,OAE9BgD,QAAQC,IAAIjD,EAAOzD,MACnB8F,EAAeG,EAAgBxC,EAAOzD,OAHR,2CAAD,sDAI5B,IAEG2G,EAAkBH,sBAAW,sBAAC,4BAAAlD,EAAA,sEACbpB,EAAeyD,EAASiB,MADX,OAC5BnD,EAD4B,OAElCgD,QAAQC,IAAIjD,GACZmC,GAAY,SAACiB,GACX,IAAMC,EAAWrD,EAAOzD,KAGxB,OADA8G,EAASC,QAAUF,EAAUE,QAAQC,OAAOF,EAASC,SAC9CD,KAPyB,2CASjC,CAACnB,IAEE1C,EAAUV,IAEhB,OACE,oCACE,8BACE,yBAAKiC,UAAWvB,EAAQvC,OACtB,kBAACJ,EAAA,EAAD,CAAW2G,SAAS,MAClB,kBAACnG,EAAA,EAAD,CAAYU,UAAU,KAAKT,QAAQ,KAAKC,MAAM,SAASkG,cAAY,GAAnE,aAKHnB,EAAY,kBAACoB,EAAA,EAAD,MAAqB,KAClC,kBAAC7G,EAAA,EAAD,CAAWkE,UAAWvB,EAAQwC,cAAewB,SAAS,MACpD,kBAACtD,EAAA,EAAD,CAAMyD,WAAS,EAACC,UAAU,MAAMhC,QAAS,GACvC,kBAAC1B,EAAA,EAAD,CAAMyD,WAAS,EAACxD,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGuB,QAAS,GAC1CM,EACC,oCACGA,EAASoB,QAAQ3F,KAAI,SAACwC,GACrB,OACE,kBAAC,EAAD,CACElC,IAAKkC,EAAKjD,KACVqC,YAAauD,EACbxD,SAAUa,OAIhB,kBAACD,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAACyD,EAAA,EAAD,CACEC,WAAS,EACTxG,QAAQ,YACRuE,MAAM,UACNf,QAASoC,GAJX,eAUF,MAEN,kBAAChD,EAAA,EAAD,CACEC,MAAI,EACJ1D,MAAO,CACLK,QAAS,YAEXsD,GAAI,GACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GAEH6B,EAAc,kBAAC,EAAD,CAAS7F,KAAM6F,IAAkB,WC9G1C2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnE,MACvB,2DCZNoE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.1cb09d8b.chunk.js","sourcesContent":["export const getTypeColor = (typeName) => {\n  switch (typeName) {\n    case \"normal\":\n      return \"#19d3da\";\n    case \"fighting\":\n      return \"#7c3c21\";\n    case \"flying\":\n      return \"#b2ebf2\";\n    case \"poison\":\n      return \"#5c2a9d\";\n    case \"ground\":\n      return \"#7d5a5a\";\n    case \"rock\":\n      return \"#b49c73\";\n    case \"bug\":\n      return \"#8ccbbe\";\n    case \"ghost\":\n      return \"#89c9b8\";\n    case \"steel\":\n      return \"#8d93ab\";\n    case \"fire\":\n      return \"#bb2205\";\n    case \"water\":\n      return \"#51adcf\";\n    case \"grass\":\n      return \"#81b214\";\n    case \"electric\":\n      return \"#fddb3a\";\n    case \"psychic\":\n      return \"#c62a88\";\n    case \"ice\":\n      return \"#00bcd4\";\n    case \"dragon\":\n      return \"#f6830f\";\n    case \"dark\":\n      return \"#000000\";\n    case \"fairy\":\n      return \"#ffbcbc\";\n    case \"unknown\":\n      return \"#5e6f64\";\n    case \"shadow\":\n      return \"#363636\";\n    default:\n  }\n};\n\nexport const replaceFirst = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","import React from \"react\";\nimport {\n  Card,\n  CardMedia,\n  CardContent,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n  Typography,\n  Container,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { replaceFirst } from \"./utils\";\n\nfunction Details({ data }) {\n  return (\n    <Card\n      style={{\n        position: \"sticky\",\n        top: \"5%\",\n        overflow: \"inherit\",\n      }}\n    >\n      <Container style={{ padding: \"10%\" }}>\n        <CardMedia\n          style={{ paddingTop: \"80%\" }}\n          title={data.name}\n          image={data.image}\n        />\n      </Container>\n      <CardContent>\n        <Typography variant=\"h4\" align=\"center\">\n          {replaceFirst(data.name)}\n        </Typography>\n\n        <Table>\n          <TableBody>\n            {data ? (\n              data.table.map((row) => (\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\" key={row.property}>\n                    {replaceFirst(row.property)}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.value}</TableCell>\n                </TableRow>\n              ))\n            ) : (\n              <CircularProgress />\n            )}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default Details;\n","import axios from \"axios\";\n\nconst PokedexAPI = axios.create({\n  baseURL: \"https://pokeapi.co/api/v2\",\n});\n\nexport const getPokemonList = (urlNext) => {\n  return urlNext\n    ? PokedexAPI.get(urlNext)\n    : PokedexAPI.get(`/pokemon?offset=0&limit=12/`);\n};\n\nexport const getPokemonInfo = (id) => PokedexAPI.get(`/pokemon/${id}/`);\n\nexport const getAllTypes = () => PokedexAPI.get(\"/type/?limit=999/\");\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Zoom,\n  Chip,\n  Typography,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { getPokemonInfo } from \"./api\";\nimport { getTypeColor, replaceFirst } from \"./utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardMedia: {\n    paddingTop: \"80%\",\n  },\n  cardContent: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n  },\n}));\n\nfunction PokeCard({ itemData, handleClick }) {\n  const classes = useStyles();\n  const [cardData, setCardData] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await getPokemonInfo(itemData.url.match(/\\/(\\d+)/)[1]);\n      setCardData(result.data);\n    };\n    fetchData();\n  }, [itemData.url]);\n\n  return (\n    <Grid item xs={12} sm={6} md={4} lg={4} key={itemData.name}>\n      <Zoom\n        in={true}\n        timeout={{\n          enter: 500,\n          exit: 1000,\n        }}\n      >\n        {cardData ? (\n          <CardActionArea onClick={() => handleClick(cardData.id)}>\n            <Card>\n              <CardMedia\n                className={classes.cardMedia}\n                title=\"title\"\n                image={cardData.sprites.front_default}\n              />\n              <CardContent className={classes.cardContent}>\n                <Typography variant=\"subtitle1\" align=\"center\">\n                  {replaceFirst(cardData.name)}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                {cardData.types.map((type) => {\n                  return (\n                    <Chip\n                      style={{ backgroundColor: getTypeColor(type.type.name) }}\n                      label={replaceFirst(type.type.name)}\n                      size=\"small\"\n                      key={type.type.name}\n                    />\n                  );\n                })}\n              </CardActions>\n            </Card>\n          </CardActionArea>\n        ) : (\n          <CircularProgress />\n        )}\n      </Zoom>\n    </Grid>\n  );\n}\n\nexport default PokeCard;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Container,\n  Typography,\n  Button,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Details from \"./Details\";\nimport PokeCard from \"./PokeCard\";\nimport { getPokemonList, getPokemonInfo } from \"./api\";\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    backgroundColor: theme.palette.primary.main,\n    padding: theme.spacing(4, 0, 2),\n    color: theme.palette.common.white,\n  },\n  cardContainer: {\n    padding: theme.spacing(3, 3, 2),\n  },\n}));\n\nfunction App() {\n  const [listData, setListData] = useState(null);\n  const [detailsCard, setDetailsCard] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchData = async () => {\n      const result = await getPokemonList();\n\n      setListData(result.data);\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  function createTableData(data) {\n    const result = {\n      table: [],\n      name: null,\n      image: null,\n    };\n    data.stats.map((item) => {\n      result.table.push({ property: item.stat.name, value: item.base_stat });\n    });\n    result.table.push({ property: \"weight\", value: data.weight });\n    result.image = data.sprites.front_default;\n    result.name = data.name;\n    return result;\n  }\n\n  const onCardClick = useCallback(async (id) => {\n    const result = await getPokemonInfo(id);\n    console.log(result.data);\n    setDetailsCard(createTableData(result.data));\n  }, []);\n\n  const loadMoreHandler = useCallback(async () => {\n    const result = await getPokemonList(listData.next);\n    console.log(result);\n    setListData((prevState) => {\n      const newState = result.data;\n\n      newState.results = prevState.results.concat(newState.results);\n      return newState;\n    });\n  }, [listData]);\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <main>\n        <div className={classes.title}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h1\" align=\"center\" gutterBottom>\n              Pokedex\n            </Typography>\n          </Container>\n        </div>\n        {isLoading ? <LinearProgress /> : null}\n        <Container className={classes.cardContainer} maxWidth=\"lg\">\n          <Grid container direction=\"row\" spacing={3}>\n            <Grid container item xs={12} sm={6} spacing={7}>\n              {listData ? (\n                <>\n                  {listData.results.map((item) => {\n                    return (\n                      <PokeCard\n                        key={item.name}\n                        handleClick={onCardClick}\n                        itemData={item}\n                      />\n                    );\n                  })}\n                  <Grid item xs={12}>\n                    <Button\n                      fullWidth\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={loadMoreHandler}\n                    >\n                      Load More\n                    </Button>\n                  </Grid>\n                </>\n              ) : null}\n            </Grid>\n            <Grid\n              item\n              style={{\n                padding: \"0 10% 0%\",\n              }}\n              xs={12}\n              sm={6}\n              md={6}\n              lg={6}\n            >\n              {detailsCard ? <Details data={detailsCard} /> : null}\n            </Grid>\n          </Grid>\n        </Container>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}